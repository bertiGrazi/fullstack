{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction ReactiveFormsComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Favor adicionar um nome\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ReactiveFormsComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Favor deve ter no m\\u00EDnimo \", (tmp_0_0 = ctx_r1.cadastroForm.get(\"lastName\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"minlength\"] == null ? null : tmp_0_0.errors[\"minlength\"].requiredLength, \" \");\n  }\n}\nexport class ReactiveFormsComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.cadastroForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', [Validators.required, Validators.minLength(5)]]\n    });\n  }\n  ngOnInit() {}\n  subimitForm() {\n    if (this.cadastroForm.valid) {\n      console.log(this.cadastroForm.value);\n      console.log(this.cadastroForm.value.firstName);\n      console.log(this.cadastroForm.value.lastName);\n    }\n  }\n  static #_ = this.ɵfac = function ReactiveFormsComponent_Factory(t) {\n    return new (t || ReactiveFormsComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ReactiveFormsComponent,\n    selectors: [[\"app-reactive-forms\"]],\n    decls: 16,\n    vars: 7,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"formControlName\", \"firstName\"], [4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"lastName\", \"maxlength\", \"5\"], [3, \"disabled\"]],\n    template: function ReactiveFormsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ReactiveFormsComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.subimitForm();\n        });\n        i0.ɵɵelementStart(1, \"label\");\n        i0.ɵɵtext(2, \" Nome: \");\n        i0.ɵɵelement(3, \"input\", 1);\n        i0.ɵɵtemplate(4, ReactiveFormsComponent_span_4_Template, 2, 0, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\")(6, \"br\");\n        i0.ɵɵelementStart(7, \"label\");\n        i0.ɵɵtext(8, \" Sobrenome: \");\n        i0.ɵɵelement(9, \"input\", 3);\n        i0.ɵɵtemplate(10, ReactiveFormsComponent_span_10_Template, 2, 1, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 4);\n        i0.ɵɵtext(12, \"Enviar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"p\");\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"json\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_4_0;\n        i0.ɵɵproperty(\"formGroup\", ctx.cadastroForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.cadastroForm.get(\"firstName\")) == null ? null : tmp_1_0.errors) && ((tmp_1_0 = ctx.cadastroForm.get(\"firstName\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.cadastroForm.get(\"firstName\")) == null ? null : tmp_1_0.dirty));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.cadastroForm.get(\"lastName\")) == null ? null : tmp_2_0.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.cadastroForm.invalid);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(15, 5, (tmp_4_0 = ctx.cadastroForm.get(\"lastName\")) == null ? null : tmp_4_0.errors), \" \");\n      }\n    },\n    dependencies: [i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MaxLengthValidator, i1.FormGroupDirective, i1.FormControlName, i2.JsonPipe],\n    styles: [\"span[_ngcontent-%COMP%] {\\n  background-color: red;\\n  color: white;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVhY3RpdmUtZm9ybXMvcmVhY3RpdmUtZm9ybXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxxQkFBQTtFQUNBLFlBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbInNwYW4ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG4gIGNvbG9yOiB3aGl0ZTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","tmp_0_0","ctx_r1","cadastroForm","get","errors","requiredLength","ReactiveFormsComponent","constructor","formBuilder","group","firstName","required","lastName","minLength","ngOnInit","subimitForm","valid","console","log","value","_","ɵɵdirectiveInject","i1","FormBuilder","_2","selectors","decls","vars","consts","template","ReactiveFormsComponent_Template","rf","ctx","ɵɵlistener","ReactiveFormsComponent_Template_form_ngSubmit_0_listener","ɵɵelement","ɵɵtemplate","ReactiveFormsComponent_span_4_Template","ReactiveFormsComponent_span_10_Template","ɵɵproperty","tmp_1_0","touched","dirty","tmp_2_0","invalid","ɵɵpipeBind1","tmp_4_0"],"sources":["/Users/graziberti/Documents/GitHub/fullstack/reactive-forms/src/app/reactive-forms/reactive-forms.component.ts","/Users/graziberti/Documents/GitHub/fullstack/reactive-forms/src/app/reactive-forms/reactive-forms.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-reactive-forms',\n  templateUrl: './reactive-forms.component.html',\n  styleUrls: ['./reactive-forms.component.scss']\n})\nexport class ReactiveFormsComponent implements OnInit{\n\n  public cadastroForm: FormGroup = this.formBuilder.group({\n    firstName: ['', Validators.required],\n    lastName: ['', [Validators.required, Validators.minLength(5)]],\n  })\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {}\n\n  public subimitForm() {\n    if(this.cadastroForm.valid) {\n      console.log(this.cadastroForm.value);\n      console.log(this.cadastroForm.value.firstName);\n      console.log(this.cadastroForm.value.lastName);\n    }\n  }\n}\n","<form [formGroup]=\"cadastroForm\" (ngSubmit)=\"subimitForm()\">\n  <label>\n    Nome: \n    <input type=\"text\" formControlName=\"firstName\">\n    <span *ngIf=\"cadastroForm.get('firstName')?.errors && cadastroForm.get('firstName')?.touched && cadastroForm.get('firstName')?.dirty\">Favor adicionar um nome</span>\n  </label>\n\n  <br>\n  <br>\n  <label>\n    Sobrenome: \n    <input type=\"text\" formControlName=\"lastName\" maxlength=\"5\">\n    <span *ngIf=\"cadastroForm.get('lastName')?.errors\">Favor deve ter no mínimo \n      {{ cadastroForm.get('lastName')?.errors?.['minlength']?.requiredLength }}\n    </span>\n    \n  </label>\n\n  <button [disabled]=\"cadastroForm.invalid\">Enviar</button>\n  <!--{{cadastroForm.get('firstName')?.value}}-->\n   <!--{{cadastroForm.get('lastName')?.value}}-->\n   <!--\n    {{cadastroForm.get('firstName')?.errors | json}}\n    {{cadastroForm.get('firstName')?.touched | json}}\n    {{cadastroForm.get('firstName')?.dirty | json}}\n   -->\n\n   <p>\n   {{cadastroForm.get('lastName')?.errors | json }}\n   </p>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}